{
  "name": "argchecker",
  "version": "0.2.0",
  "description": "A command line options parser",
  "keywords": [
    "argument",
    "option",
    "command",
    "cli"
  ],
  "author": {
    "name": "tasogarepg",
    "email": "tasogare.pg@gmail.com"
  },
  "homepage": "https://github.com/tasogarepg/argchecker",
  "repository": {
    "type": "git",
    "url": "git://github.com/tasogarepg/argchecker.git"
  },
  "main": "./lib/argchecker.js",
  "engines": {
    "node": ">= 0.6.0"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "*"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "# argchecker\n\nA command line options parser for Node.js.\n\n## Installation\n\n    $ npm install argchecker\n\n## Usage\n```js\n#!/usr/bin/env node\n\nvar ac = require('argchecker').check({\n  expect: {\n    '-a': {},\n    '-l': {param: 'LOG_FILE', default: 'log.txt'},\n    'arg1': {},\n    'arg2': {must: true}\n  }\n});\n\n// When invalid arg comes from command line, this script shows the usage information, and exit here.\n\nvar log = ac.get('-l');       // get '-l' option's param\n\nvar arg1 = ac.get('arg1');    // get non option args\nvar arg2 = ac.get('arg2');    // \n\nif (ac.isOn('-a')) {          // check '-a' option\n  // ...\n}\n```\n\n### Example\nin command line\n\n    $ app2 -a -l log1.txt XXX YYY\n\napp2\n```js\n#!/usr/bin/env node\n\nvar ac = require('argchecker').check({\n  expect: {\n    '-a': {},\n    '-l': {param: 'LOG_FILE'},\n    'arg1': {},\n    'arg2': {}\n  }\n});\n\nvar log = ac.get('-l');     // log1.txt\n\nvar arg1 = ac.get('arg1');  // XXX\nvar arg2 = ac.get('arg2');  // YYY\n\nif (ac.isOn('-a')) {        // true\n  // ...\n}\n```\n\n## Tags\n### repeat\nin command line\n\n    app3 -a -l log1.txt XXX1 XXX2 XXX3 YYY\n\napp3\n```js\n#!/usr/bin/env node\n\nvar ac = require('argchecker').check({\n  expect: {\n    '-a': {},\n    '-l': {param: 'LOG_FILE'},\n    'arg1': {repeat: true},     // <-- set 'repeat'\n    'arg2': {}\n  }\n});\n\nvar arg1 = ac.get('arg1');    // [XXX1, XXX2, XXX3]\nvar arg2 = ac.get('arg2');    // YYY\n```\n\n### repeat (for option)\nin command line\n\n    $ app4 -b 10 -b 20 -b 30 XXX\n\napp4\n```js\n#!/usr/bin/env node\n\nvar ac = require('argchecker').check({\n  expect: {\n    '-b': {param: 'B_PARAM', repeat: true},   // <-- set 'repeat'\n    'arg1': {},\n    'arg2': {}\n  }\n});\n\nvar b = ac.get('-b');       // [10, 20, 30]\n\nvar arg1 = ac.get('arg1');  // XXX\nvar arg2 = ac.get('arg2');  // undefined\n```\n\n### must\nin command line\n\n    $ app5 -b 10 YYY\n\napp5\n```js\n#!/usr/bin/env node\n\nvar ac = require('argchecker').check({\n  expect: {\n    '-b': {param: 'B_PARAM'},\n    'arg1': {},\n    'arg2': {must: true}    // <-- set 'must'\n  }\n});\n\nvar b = ac.get('-b');       // 10\n\nvar arg1 = ac.get('arg1');  // undefined  <-- skiped\nvar arg2 = ac.get('arg2');  // YYY        <-- must\n```\n\n## Other tags\n\n### param (for option)\nYou **have to** set this tag, when an option has a next parameter.\n```js\nvar ac = require('argchecker').check({\n  expect: {\n    '-l': {param: 'LOG_FILE'}     // <-- \n  }\n});\n```\n\n### default (for option)\nThis tag can be set when the \"param\" tag exists.\n```js\nvar ac = require('argchecker').check({\n  expect: {\n    '-l': {param: 'LOG_FILE', default: 'log.txt'},    // <-- \n    'arg1': {must: true}\n  }\n});\n```\n\n### name (top level only)\n\"name\" is used in the usage information.\n```js\nvar ac = require('argchecker').check({\n  expect: {\n    '-b': {param: 'B_PARAM'},\n  },\n  name: 'app_name'  // <-- \n});\n```\nin stderr message\n\n    Usage: app_name [-b B_PARAM]\n\n### exit (top level only)\nThe status code at the time of an error. Default: 1\n```js\nvar ac = require('argchecker').check({\n  expect: {\n    '-b': {param: 'B_PARAM'},\n  },\n  name: 'app_name',\n  exit: 20          // <-- \n});\n```\n\n## License\n\nThe MIT License\n",
  "readmeFilename": "README.md",
  "_id": "argchecker@0.2.0",
  "dist": {
    "shasum": "65ade4c2b9ba1446a76b18aa3255167a02cb4268"
  },
  "_from": "argchecker@",
  "_resolved": "https://registry.npmjs.org/argchecker/-/argchecker-0.2.0.tgz"
}
